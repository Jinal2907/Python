# -*- coding: utf-8 -*-
"""Twitter_Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gseKacKr2iancjrv_lQa06fwwC2HnEdg
"""

! pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

# extracting compressed dataset

from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data processing"""

twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

twitter_data.shape

twitter_data.head()

# naming the columns and reading the dataset again

column_names = ['target','id','date','flag','user','text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding = 'ISO-8859-1')

twitter_data.shape

twitter_data.head()

# counting the number of missing values in the dataset
twitter_data.isnull().sum()

# checking the distribution of target column
twitter_data['target'].value_counts()

"""Convert the target "4" to "1"
"""

twitter_data.replace({'target':{4:1}}, inplace=True)

twitter_data['target'].value_counts()

"""0 ---> Negative Tweet

1 ---> Positive Tweet

**Stemming**

Stemming is a process of reducing a word to its Root word

example: actor, actress, acting = act
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

# mounting the Google Drive
from google.colab import drive
drive.mount('/content/drive')

twitter_data.to_csv('/content/drive/MyDrive/Stemmed_Twitter_Data.csv', index=False)

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# seperating the data and label
x = twitter_data['stemmed_content'].values
y = twitter_data['target'].values

print(x)

print(y)

"""Splitting the data to training data and test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

print(x_train)

print(x_test)

# converting the textual data into numerical data

vectorizer = TfidfVectorizer()

x_train = vectorizer.fit_transform(x_train)
x_test = vectorizer.transform(x_test)

print(x_train)

print(x_test)

"""Training the machine learning model

Logistic Regression
"""

model = LogisticRegression(max_iter=1000)

model.fit(x_train, y_train)

"""Model Evaluation

Accuracy_Score
"""

# accuracy score on the training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(y_train, x_train_prediction)

print('Accuracy score on the training data :', training_data_accuracy)

# accuracy score on the test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(y_test, x_test_prediction)

print('Accuracy score on the test data :', test_data_accuracy)

"""Model Accuracy ---> 77.8%"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

"""using the same model for future prediction"""

#loading the saved model
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

x_new = x_test[200]
print(y_test[200])

prediction = model.predict(x_new)
print(prediction)

if prediction[0] == 0:
  print('Negative Tweet')

else:
  print('Positive Tweet')

x_new = x_test[3]
print(y_test[3])

prediction = model.predict(x_new)
print(prediction)

if prediction[0] == 0:
  print('Negative Tweet')

else:
  print('Positive Tweet')

